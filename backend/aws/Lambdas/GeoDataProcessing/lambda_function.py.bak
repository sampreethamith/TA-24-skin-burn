import json
from datetime import datetime, timedelta
import boto3
import os
import random
import reverse_geocode
from urllib.parse import urlparse
from botocore.exceptions import ClientError

s3_client = boto3.client('s3')
s3 = boto3.resource('s3')
lambda_client = boto3.client('lambda')
s3_bucket_name = 'skinburn-bucket'
invoke_lambda_fn_name = "arn:aws:lambda:us-east-2:102281328318:function:WeatherAPICall"
response_obj = {}
# categories = {
#     'state': 'australian-states.min.geojson',
#     'council': [],
#     'city': [],
#     'test': 'australian-states.min.geojson'
# }
req_backlog_hours = 1

# def get_file_name(category):
#     if category == 'test':
#         return categories['test']
#     elif category == 'state':
#         return categories['state']


def set_error_msg(response_obj, message):
    return {
        'statusCode': 500,
        'headers': response_obj['headers'],
        'body': {
            'msg': message
        }
    }


def read_s3_object(name):
    try:
        file_obj = s3_client.get_object(Bucket=s3_bucket_name, Key=name)
        file_content = file_obj['Body'].read().decode('utf-8')
        data = json.loads(file_content)
        return data
    except ClientError as e:
        response_obj['statusCode'] = 500
        print("S3 Operation failed")
        print(e.response)
        return None


def invoke_lambda(input_payload):
    response = lambda_client.invoke(
        FunctionName=invoke_lambda_fn_name,
        InvocationType='RequestResponse',
        Payload=json.dumps(input_payload)
    )
    return json.load(response['Payload'])


# def get_input_payload(geo_json_data, category):
#     data = []
#     for feature in geo_json_data['features']:
#         if category == 'state' or category == 'test':
#             data.append(feature['properties']['STATE_NAME'])
#     return {'wdata': data}


# def set_uvi(geo_json_data, category, response_from_child):
#     for feature in geo_json_data['features']:
#         # set uvi into feature properties
#         if category == 'state' or category == 'test':
#             feature['properties']['UVI'] = response_from_child['body'][feature['properties']['STATE_NAME']]
#     return geo_json_data


# def safe_execute(category: str, response_obj):
#     # try:
#         geo_json_data = read_s3_object(get_file_name(category))
#         response_from_child = {}
#         if category == 'test':
#             print('in test')
#             input_payload = get_input_payload(geo_json_data, category)
#             response_from_child = {'body': {}}
#             for item in input_payload['wdata']:
#                 response_from_child['body'][item] = random.randrange(0, 11)
#         else:
#             print('in else')
#             response_from_child = invoke_lambda(
#                 get_input_payload(geo_json_data, category))
#         print(response_from_child)
#         if response_from_child is None or response_from_child['body'] is None:
#             raise Exception('Unable to retrieve uv index data.')
#         response_obj['body'] = set_uvi(geo_json_data, category, response_from_child)
#         return response_obj
#     # except Exception as e:
#     #     print(e)
#     #     return set_error_msg(response_obj, str(e))

def retrive_weather_data(file_name, val_list):
    ow_geo_json_data = read_s3_object(file_name)
    if 'all' in val_list:
        filter_items = [item for name, item in ow_geo_json_data.items()]
    elif len(val_list) == 1 and val_list[0] not in ow_geo_json_data:
        return None
    else:
        filter_items = [ow_geo_json_data[name]
                        for name in val_list if name in ow_geo_json_data]
    # updatedtime <= request - 1hr  -> call
    request_time = datetime.today()
    global req_backlog_hours
    backlog_timestamp = (
        request_time - timedelta(hours=req_backlog_hours, minutes=0)).timestamp()
    for item in filter_items:
        if item['properties']['updatedtime'] <= backlog_timestamp:
            response_from_child = invoke_lambda(
                {'lat': item['properties']['coord']['lat'], 'lon': item['properties']['coord']['lon']})
            item['uvi'] = response_from_child['uvi']
            item['updatedtime'] = datetime.today().timestamp()
            ow_geo_json_data[item['name']]['properties']['uvi'] = item['uvi']
            ow_geo_json_data[item['name']
                             ]['properties']['updatedtime'] = item['updatedtime']
    return filter_items


def get_geo_weather_data(q, v, response_obj):
    val_list = v.split(",") if "," in v else [v]
    if 'all' in val_list and len(val_list) > 1:
        return set_error_msg(response_obj, "only one values accepted for query parameter's value if it is set as 'all' flag")
    if q == 'state':
        response_obj['body'] = retrive_weather_data(
            'state_with_geo.json', val_list)
        return response_obj
    elif q == 'city':
        if 'all' in val_list or len(val_list) > 5:
            return set_error_msg(response_obj, "you cannot retrive more than 5 cities at once.")
        response_obj['body'] = retrive_weather_data(
            'city_with_geo.json', val_list)
        return response_obj
    elif q == 'loc':
        found_loc = reverse_geocode.search(
            (float(val_list[0]), float(val_list[1])))
        data = retrive_weather_data('city_with_geo.json', [found_loc['city']])
        if data == None:
            data = invoke_lambda({
                'loc': {'lat': val_list[0], 'lon': val_list[1]}
            })
        else:
            response_obj['body'] = data
    else:
        return set_error_msg(response_obj, "query parameter's value(s) are invalid.")


def lambda_handler(event, context):
    response_obj = {
        'isBase64Encoded': True,
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Headers': 'Content-Type',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
        },
        'body': {}
    }
    print(event)
    if "queryStringParameters" in event and "q" in event["queryStringParameters"] and "v" in event["queryStringParameters"]:
        response_obj = get_geo_weather_data(
            event["queryStringParameters"]['q'], event["queryStringParameters"]['v'], response_obj)
    else:
        response_obj = set_error_msg(
            response_obj, "query parameters are invalid.")
    response_obj['body'] = json.dumps(
        response_obj['body']) if response_obj['body'] is not None else ""
    # print(response_obj)
    return response_obj


lambda_handler({
    'queryStringParameters': {
        'q': 'city',
        'v': 'clayton'
    }}, None)
# ?q:[state,city,loc]&v:[val1,val2,[all]]
